{
  "_args": [
    [
      "http-cache",
      "/server/owengine/node_modules/web-server"
    ]
  ],
  "_from": "http-cache@*",
  "_id": "http-cache@0.3.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/http-cache",
  "_npmUser": {
    "email": "asilvas@godaddy.com",
    "name": "asilvas"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "name": "http-cache",
    "raw": "http-cache",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/http-cache/-/http-cache-0.3.1.tgz",
  "_shasum": "10589e6555f8f85b73f660ca6511bce27ef27e92",
  "_shrinkwrap": null,
  "_spec": "http-cache",
  "_where": "/server/owengine/node_modules/web-server",
  "author": {
    "email": "asilvas@godaddy.com",
    "name": "Aaron Silvas"
  },
  "bugs": {
    "url": "https://github.com/godaddy/node-http-cache/issues"
  },
  "dependencies": {
    "async": ">=0.2.x",
    "extend": ">=1.1.x"
  },
  "description": "An extensible caching interface for HTTP traffic.",
  "devDependencies": {
    "connect": ">=2.7.x",
    "istanbul": "~0.1.43",
    "mocha": "~1.12.0",
    "request": ">=2.21.0"
  },
  "directories": {},
  "dist": {
    "shasum": "10589e6555f8f85b73f660ca6511bce27ef27e92",
    "tarball": "http://registry.npmjs.org/http-cache/-/http-cache-0.3.1.tgz"
  },
  "homepage": "https://github.com/godaddy/node-http-cache",
  "keywords": [
    "REST",
    "cache",
    "http",
    "http cache"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "asilvas",
      "email": "asilvas@godaddy.com"
    }
  ],
  "name": "http-cache",
  "optionalDependencies": {},
  "readme": "# http-cache\r\n\r\n[![Build Status](https://travis-ci.org/godaddy/node-http-cache.png)](https://travis-ci.org/godaddy/node-http-cache) [![NPM version](https://badge.fury.io/js/http-cache.png)](http://badge.fury.io/js/http-cache)\r\n\r\n\r\n## Install\r\n\r\n\tnpm install http-cache\r\n\r\nhttps://npmjs.org/package/http-cache\r\n\r\n\r\n## What is it?\r\n\r\nA simple HTTP caching interface with extensible provider support.\r\n\r\n \r\n## Getting Started with Connect/Express\r\n\r\nUsing Connect or Express?\r\n\r\n\tvar\r\n\t\tconnect = require(\"connect\"),\r\n\t\thttp = require(\"http\"),\r\n\t\tHttpCache = require(\"http-cache\")\r\n\t;\r\n\r\n\tvar app = connect()\r\n\t\t.use(new HttpCache({ }))\r\n\t\t.use(function(req, res) {\r\n\t\t\tres.end(\"Cache this response! Time=\" + new Date().getTime());\r\n\t\t});\r\n\r\n\thttp.createServer(app).listen(8392);\r\n\r\n\t\r\n## Getting Started with HTTP\r\n\r\nReal coders use no middleware? We've got you covered...\r\n\r\n\tvar\r\n\t\thttp = require(\"http\"),\r\n\t\tHttpCache = require(\"http-cache\")\r\n\t;\r\n\r\n\tvar httpcache = new HttpCache({ });\r\n\thttp.createServer(function(req, res) {\r\n\t\thttpcache(req, res, function() {\r\n\t\t\tres.end(\"Cache this response! Time=\" + new Date().getTime());\r\n\t\t});\r\n\t}).listen(8392);\r\n\t\r\n\t\r\n## HttpCache Options\r\n\r\nOptions may be provided when constructing your HttpCache object...\r\n\r\n\tvar HttpCache = require(\"http-cache\");\r\n\tvar httpcache = new HttpCache({ /* my options go here */ });\r\n\t\r\nOptions include:\r\n\r\n* ttl (default: 600) - Time (in seconds) before cache object will be purged.\r\n* provider (default: require(\"lib/providers/InProcProvider\")) - Alternate providers may\r\n  be specified, including your own Custom Provider.\r\n* headersToExclude (default: see code) - You may optionally manage which HTTP headers\r\n  are included/excluded via this object.\r\n* rules (default: []) - An optional set of custom caching rules. See Custom Rules.\r\n* varyByHeader (default: []) - An array of strings that will cache key by specific\r\n  header fields.\r\n* varyByParam (default: []) - An array of strings that will cache key by specific\r\n  querystring parameters.\r\n* purgeAll (default: false) - If true, will clear all cache objects from the provider.\r\n  Typically only useful during testing.\r\n* confirmCacheBeforeEnd (default: false) - If set to true, will confirm successful\r\n  cache writes before ending response. Typically only used for unit tests to avoid\r\n  race conditions. Should not be used in a production setting.\r\n\r\n\t\r\n## Custom Rules\r\n\r\nBoth synchronous and asynchronous rules may be provided:\r\n\r\n\thttpcache({\r\n\t\trules: function(req, res) {\r\n\t\t\t// do not cache users folder\r\n\t\t\treturn (/\\/users\\//i.test(req.url) === false);\r\n\t\t}\r\n\t});\r\n\r\nAsync rules leverage cb instead of returning...\r\n\r\n\thttpcache({\r\n\t\trules: function(req, res, cb) {\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\t// do not cache users folder\r\n\t\t\t\tcb(null, /\\/users\\//i.test(req.url) === false);\r\n\t\t\t}, 100);\r\n\t\t}\r\n\t});\r\n\t\r\nMultiple rules may be provided as well... (will be processed in parallel)\r\n\r\n\thttpcache({\r\n\t\trules: [ rule1, rule2, rule3 ]\r\n\t});\r\n\r\n\t\r\n## Custom Provider\r\n\t\r\nProviders are intended to be very simple and extensible, so feel free to contribute\r\nyour own providers if what is provided does not suite your needs.\r\n\r\n* provider.isTTLManaged - If set to true, http-cache will not be responsible for\r\n  purging expired entries. Reserved for distributed providers that have internal\r\n  support for TTL that will be more reliable.\r\n* provider.get(key, cb) - Returns object via callback. If no object found, null or undefined\r\n  should be returned, NOT an error.\r\n* provider.set(key, cache, cb) - Stores a JavaScript object in whatever means necessary.\r\n* provider.remove(key, cb) - Removes cache entry if it exists.\r\n* provider.clear(cb) - Purges all cache entries.\r\n\r\n\r\nSee lib/providers/in-proc-provider.js to see how to create your own provider.\r\n\r\n\r\n\r\n## Available Providers\r\n\r\nIf you build your own custom provider, feel free to issue a pull request so we can reference\r\nyour provider as well.\r\n\r\n* InProcProvider - https://github.com/godaddy/node-http-cache/blob/master/lib/providers/in-proc-provider.js\r\n* CassandraProvider - https://npmjs.org/package/http-cache-cassandra\r\n* FileSystemProvider - TODO\r\n\t\r\n\r\n## Tests & Code Coverage\r\n\r\nDownload and install:\r\n\r\n\tgit clone https://github.com/godaddy/node-http-cache.git\r\n\tcd node-http-cache\r\n\tnpm install\r\n\r\nNow test:\t\r\n\r\n\tnpm test\r\n\r\nView code coverage in any browser:\r\n\r\n\tcoverage/lcov-report/index.html\r\n\r\n\r\n\r\n## License\r\n\r\n[MIT](https://github.com/godaddy/node-http-cache/blob/master/LICENSE.txt)\r\n\r\n\r\n\r\n## TODO\r\n\r\n* Add FileSystem Provider\r\n* Add sliding TTL support? (Possible performance impact)\r\n* Add per-request TTL customization? (Possible performance impact)\r\n* Add support for array based header values (part of node spec), i.e.\r\n\t* res.writeHead(200, { \"set-cookie\": [cookie1, cookie2] });\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/godaddy/node-http-cache.git"
  },
  "scripts": {
    "test": "istanbul cover ./node_modules/mocha/bin/_mocha -- --ui bdd -R spec -t 4000 -d"
  },
  "version": "0.3.1"
}
